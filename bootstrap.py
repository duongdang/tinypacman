#! /usr/bin/env python

__author__ = "Duong Dang"
__version__ = "0.1"

import logging, sys, os
import re

class NullHandler(logging.Handler):
    def emit(self, record):
        pass

logger = logging.getLogger("bootstrap")
logger.addHandler(NullHandler())
logger.setLevel(logging.DEBUG)

def valid_var(s):
    return re.sub(r"\W", "_",s)

def main():
    import optparse
    parser = optparse.OptionParser(
        usage='\n\t%prog [options]',
        version='%%prog %s' % __version__)

    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="be verbose")

    parser.add_option("-r", "--root",
                      action="store", type="str",
                      dest="root", default=os.path.abspath(os.path.dirname(__file__)),
                      help="root folder of source")

    parser.add_option("-p", "--prefix",
                      action="store", type="str",
                      dest="prefix", default="/usr/local",
                      help="install prefix")

    parser.add_option("-l", "--package-list",
                      action="store", type="str",
                      dest="list", default="sotpylist",
                      help="package list, default : sotpyist")

    parser.add_option("-b", "--boost-root",
                      action="store", type="str",
                      dest="boost_root", default="",
                      help="boost prefix")

    parser.add_option("-o", "--output",
                      action="store", type="str",
                      dest="output", default="ROOT/Makefile",
                      help="output Makefile (default : $ROOT/Makefile)")

    parser.add_option("--openhrp-home",
                      action="store", type="str",
                      dest="openhrp_home",
                      help="openhrp_home (mandaratory)")

    (options, args) = parser.parse_args(sys.argv[1:])
    if not options.openhrp_home:
        raise Exception("openhrphome option is mandatory. Please specify one!")

    if options.output == "ROOT/Makefile":
        options.output = os.path.join(options.root, "Makefile")

    options.list = options.list.replace("\.py","")

    cfgs = __import__(options.list)

    global_vars = cfgs.global_vars
    cmake_opts  = cfgs.cmake_opts
    pkgs        = cfgs.pkgs

    global_vars['ROOT'] = options.root
    global_vars['INSTALL_PREFIX'] = options.prefix
    global_vars['BOOST_ROOT'] = options.boost_root
    global_vars['OPENHRP3_HOME'] = options.openhrp_home

    s = "#Generated by bootstrap.py\n"

    for key, value in global_vars.items():
        s += "%-30s = %s\n"%(key,value)
    s += 2*"\n"

    s += "all:\\\n"
    for i,pkg in enumerate(pkgs):
        s += "    %s"%(valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"

    s += "build_all:\\\n"
    for i,pkg in enumerate(pkgs):
        s += "    %s_configure %s"%(valid_var(pkg[0]),valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"

    for action in ("checkout", "pull", "clean",
                   "very_clean", "update"):

        s += "%s:\\\n"%action
        for i,pkg in enumerate(pkgs):
            s += "    %s_%s"%(valid_var(pkg[0]),action)
            if i < len(pkgs)-1:
                s += " \\\n"
        s += 2*"\n"

    for pkg in pkgs:
        name = pkg[0]
        alpha_name = valid_var(name)
        gituri = "%s/%s"%(pkg[1],name)
        branch = pkg[2]
        s += """%s:
\tcd ${ROOT}/%s/_build; make install
"""%(alpha_name, name)

        cmake_opt = ""
        for key, value in cmake_opts.items():
            if re.match(r"%s"%key, name):
                cmake_opt += "%s "%value

        # checkout
        if branch != 'master':
            s += """%s_checkout:
\tcd ${ROOT}; git clone --recursive %s; \\
\tcd ${ROOT}/%s; \\
\tgit checkout -b %s origin/%s
"""%(alpha_name, gituri, name, branch, branch)
        else:
            s += """%s_checkout:
\tcd ${ROOT}; git clone --recursive %s
"""%(alpha_name, gituri)

        # pull
        s += """%s_pull:
\tcd ${ROOT}/%s/  && git pull && git submodule update
"""%(alpha_name, name)

        # configure
        s += """%s_configure:
\tmkdir -p ${ROOT}/%s/_build
\tcd ${ROOT}/%s/_build && cmake %s ..
"""%(alpha_name, name, name, cmake_opt)

        # clean
        s += """%s_clean:
\tcd ${ROOT}/%s/_build && make clean
"""%(alpha_name, name)

        # very_clean
        s += """%s_very_clean:
\tcd ${ROOT}/%s/_build && rm -rf *
"""%(alpha_name, name)

        # update
        s += """%s_update:
\tcd ${ROOT}/%s/_build; git diff --quiet %s ..origin/%s -- || (git pull && make install)
"""%(alpha_name, name, branch, branch)

        s += 1*"\n"



    f = open(options.output,"w")
    f.write(s)
    f.close()



if __name__ == '__main__':
    main()
