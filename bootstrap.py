#! /usr/bin/env python

__author__ = "Duong Dang"
__version__ = "0.1"

import logging, sys, os
import re

class NullHandler(logging.Handler):
    def emit(self, record):
        pass

logger = logging.getLogger("bootstrap")
logger.addHandler(NullHandler())
logger.setLevel(logging.DEBUG)

global_vars = { 'ROOT': None,
                'GITJRL':'ssh://git@github.com/jrl-umi3218',
                'GITLAAS':'ssh://git@github.com/laas',
                'GITSOFTS':'ssh://softs.laas.fr/git/jrl/',
                'INSTALL_PREFIX': None,
                'OPENHRP3_HOME':'/local/nddang/profiles/sotpy/install/stable/OpenHRP',
                'BOOST_ROOT':'/local/nddang/profiles/sotpy/install/stable',
                }

cmake_opts = { ".*" : "-DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} "+
               "-DBOOST_ROOT=${BOOST_ROOT} -DCMAKE_BUILD_TYPE=Debug",
               "sot-.*": "-DCMAKE_VERBOSITY_LEVEL=100 -DPROJECT_VERSION=1.99",
               "dynamic-graph*": "-DCMAKE_VERBOSITY_LEVEL=100 -DPROJECT_VERSION=1.99",
               "jrl-mal" : "-DSMALLMATRIX=jrl-mathtools"
               }

pkgs = [ ('jrl-mathtools'           , '${GITJRL}',  'master'),
         ('jrl-mal'                 , '${GITJRL}',  'master'),
         ('hpp-template-corba'      , '${GITLAAS}', 'master'),
         ('dynamic-graph'           , '${GITJRL}',  'topic/proto-command'),
         ('dynamic-graph-python'    , '${GITJRL}',  'topic/jrl-mal'),
         ('dynamic-graph-corba'     , '${GITLAAS}', 'master'),
         ('sot-core'                , '${GITJRL}',  'topic/python'),
         ('abstract-robot-dynamics' , '${GITLAAS}', 'master'),
         ('jrl-dynamics'            , '${GITJRL}',  'master'),
         ('hrp2Dynamics'             ,'${GITSOFTS}','master'),
         ('hrp2_10'                 , '${GITSOFTS}','master'),
         ('hrp2-10-optimized'       , '${GITSOFTS}/robots','master'),
         ('hrp2_14'                 , '${GITSOFTS}','master'),
         ('sot-dynamic'             , '${GITJRL}',  'topic/python'),
         ('sot-openhrp'             , '${GITJRL}',  'topic/python'),
         ('dynamic-graph-tutorial'  , '${GITJRL}',  'master'),
         ]

def valid_var(s):
    return re.sub(r"\W", "_",s)

def main():
    import optparse
    parser = optparse.OptionParser(
        usage='\n\t%prog [options]',
        version='%%prog %s' % __version__)
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="be verbose")

    parser.add_option("-r", "--root",
                      action="store", type="str",
                      dest="root", default=os.path.abspath(os.path.dirname(__file__)),
                      help="root folder of source")

    parser.add_option("-p", "--prefix",
                      action="store", type="str",
                      dest="prefix", default="/usr/local",
                      help="install prefix")


    (options, args) = parser.parse_args(sys.argv[1:])
    global global_vars
    global_vars['ROOT'] = options.root
    global_vars['INSTALL_PREFIX'] = options.prefix

    s = "#Generated by bootstrap.py\n"

    for key, value in global_vars.items():
        s += "%-30s = %s\n"%(key,value)
    s += 2*"\n"

    s += "all:\\\n"
    for i,pkg in enumerate(pkgs):
        s += " %s"%valid_var(pkg[0])
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"

    s += "build_all:\\\n"
    for i,pkg in enumerate(pkgs):
        s += " %s_configure %s"%(valid_var(pkg[0]),valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"

    s += "checkout:\\\n"
    for i,pkg in enumerate(pkgs):
        s += " %s_checkout"%(valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"


    s += "pull:\\\n"
    for i,pkg in enumerate(pkgs):
        s += " %s_pull"%(valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"

    s += "clean:\\\n"
    for i,pkg in enumerate(pkgs):
        s += " %s_clean"%(valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"

    s += "very_clean:\\\n"
    for i,pkg in enumerate(pkgs):
        s += " %s_very_clean"%(valid_var(pkg[0]))
        if i < len(pkgs)-1:
            s += " \\\n"
    s += 2*"\n"


    for pkg in pkgs:
        name = pkg[0]
        alpha_name = valid_var(name)
        gituri = "%s/%s"%(pkg[1],name)
        branch = pkg[2]
        s += """%s:
\tcd ${ROOT}/%s/_build; make install
"""%(alpha_name, name)

        if branch != 'master':
            s += """%s_checkout:
\tcd ${ROOT}; git clone --recursive %s; \\
\tcd ${ROOT}/%s; \\
\tgit checkout -b %s origin/%s
"""%(alpha_name, gituri, name, branch, branch)
        else:
            s += """%s_checkout:
\tcd ${ROOT}; git clone --recursive %s
"""%(alpha_name, gituri)
        cmake_opt = ""
        for key, value in cmake_opts.items():
            if re.match(r"%s"%key, name):
                cmake_opt += "%s "%value

        s += """%s_pull:
\tcd ${ROOT}/%s/; git pull; git submodule update
"""%(alpha_name, name)

        s += """%s_configure:
\tmkdir -p ${ROOT}/%s/_build
\tcd ${ROOT}/%s/_build; cmake %s ..
"""%(alpha_name, name, name, cmake_opt)

        s += """%s_clean:
\tcd ${ROOT}/%s/_build; make clean
"""%(alpha_name, name)

        s += """%s_very_clean:
\tcd ${ROOT}/%s/_build; rm -rf *
"""%(alpha_name, name)
        s += 1*"\n"

    f = open("Makefile","w")
    f.write(s)
    f.close()



if __name__ == '__main__':
    main()
